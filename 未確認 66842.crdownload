{"cells":[{"cell_type":"code","execution_count":null,"id":"ebc2111d","metadata":{"id":"ebc2111d","outputId":"3f9b1b66-6eca-40de-c72f-2f0a7dd1ee7a"},"outputs":[{"name":"stdout","output_type":"stream","text":["Unsorted array:\n","[33, 67, 8, 13, 54, 119, 3, 84, 25, 41]\n","=======================================\n","[33, 8, 13, 3, 25, 41, 67, 84, 54, 119]\n","[8, 13, 3, 25, 33, 41, 67, 84, 54, 119]\n","[3, 13, 8, 25, 33, 41, 67, 84, 54, 119]\n","[3, 8, 13, 25, 33, 41, 67, 84, 54, 119]\n","[3, 8, 13, 25, 33, 41, 67, 84, 54, 119]\n","[3, 8, 13, 25, 33, 41, 54, 84, 67, 119]\n","[3, 8, 13, 25, 33, 41, 54, 67, 84, 119]\n","=======================================\n","Sorted Result:\n","[3, 8, 13, 25, 33, 41, 54, 67, 84, 119]\n"]}],"source":["# Function to find the partition position\n","def partition(array, left, right):\n","\n","    # Choose right one as pivot\n","    pivot = array[right]\n","    \n","    # Define a pointer\n","    i = left - 1\n","    \n","    # Compare all element with pivot\n","    for j in range(left, right):\n","        # If element smaller than pivot is found\n","        # Swap it with the greater element pointed by i\n","        if array[j] <= pivot:\n","            \n","            # Change pointer position\n","            i = i + 1\n","            \n","            # Swap element i with element j\n","            (array[i], array[j]) = (array[j], array[i])\n","\n","    # Put Pivot to pointer+1 position\n","    (array[i + 1], array[right]) = (array[right], array[i + 1])\n","    \n","    return i + 1\n","\n","# Function to perform quicksort\n","def quickSort(array, low, high):\n","    if low < high:\n","        #Search pivot\n","        pivot = partition(array, low, high)\n","        \n","        #Print sorting process\n","        print(array)\n","        \n","        # Left Recursion\n","        quickSort(array, low, pivot - 1)\n","        \n","        # Right Recursion\n","        quickSort(array, pivot + 1, high)\n","\n","\n","data = [33, 67, 8, 13, 54, 119, 3, 84, 25, 41]\n","print(\"Unsorted array:\")\n","print(data)\n","print(\"=======================================\")\n","\n","size = len(data)\n","quickSort(data, 0, size - 1)\n","print(\"=======================================\")\n","print(\"Sorted Result:\")\n","print(data)"]},{"cell_type":"code","execution_count":null,"id":"ad30c760","metadata":{"id":"ad30c760"},"outputs":[],"source":[]}],"metadata":{"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.13"},"colab":{"provenance":[]}},"nbformat":4,"nbformat_minor":5}